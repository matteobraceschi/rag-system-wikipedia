from nltk.translate.bleu_score import sentence_bleu
from rouge_score import rouge_scorer

def simple_tokenize(text):
    """
    A simple tokenizer that splits text into tokens based on whitespace and punctuation.
    
    :param text: The input text to tokenize
    :return: A list of tokens
    """
    return text.lower().split()

def evaluate_response(generated_response, correct_response):
    """
    Evaluate the generated responses against the correct answers.
    
    :param generated_response: response generated by the model
    :param correct_response: correct answer
    :return: None
    """
    # Truncate the generated response to the first sentence
    truncated_response = generated_response.split('.')[0] + '.'

    # Calculate BLEU for full and truncated responses
    generated_tokens = simple_tokenize(generated_response)
    truncated_tokens = simple_tokenize(truncated_response)
    correct_tokens = simple_tokenize(correct_response)
    
    bleu_score_full = sentence_bleu([correct_tokens], generated_tokens)
    bleu_score_truncated = sentence_bleu([correct_tokens], truncated_tokens)

    # Calculate ROUGE for full and truncated responses
    scorer = rouge_scorer.RougeScorer(['rouge1', 'rouge2', 'rougeL'], use_stemmer=True)
    rouge_full = scorer.score(correct_response, generated_response)
    rouge_truncated = scorer.score(correct_response, truncated_response)

    # Print the results
    print(f"\nCorrect: {correct_response}\n")
    print(f"Full Generated Response BLEU Score: {bleu_score_full:.4f}")
    print(f"Truncated Generated Response BLEU Score: {bleu_score_truncated:.4f}")
    print(f"Full Generated ROUGE-1: {rouge_full['rouge1'].fmeasure:.4f}")
    print(f"Truncated Generated ROUGE-1: {rouge_truncated['rouge1'].fmeasure:.4f}")
    print(f"Full Generated ROUGE-2: {rouge_full['rouge2'].fmeasure:.4f}")
    print(f"Truncated Generated ROUGE-2: {rouge_truncated['rouge2'].fmeasure:.4f}")
    print(f"Full Generated ROUGE-L: {rouge_full['rougeL'].fmeasure:.4f}")
    print(f"Truncated Generated ROUGE-L: {rouge_truncated['rougeL'].fmeasure:.4f}")

    # Prepare the results as a formatted string
    evaluation_results = (
        f"\nCorrect answer: {correct_response}\n\n"
        f"BLEU Score on Full Response: {bleu_score_full:.4f}\n\n"
        f"BLEU Score on Truncated Response : {bleu_score_truncated:.4f}\n\n"
        f"ROUGE-1 on Full Response: {rouge_full['rouge1'].fmeasure:.4f}\n\n"
        f"ROUGE-1 on Truncated Response: {rouge_truncated['rouge1'].fmeasure:.4f}\n\n"
        f"ROUGE-2 on Full Response: {rouge_full['rouge2'].fmeasure:.4f}\n\n"
        f"ROUGE-2 on Truncated Response: {rouge_truncated['rouge2'].fmeasure:.4f}\n\n"
        f"ROUGE-L on Full Response: {rouge_full['rougeL'].fmeasure:.4f}\n\n"
        f"ROUGE-L on Truncated Response: {rouge_truncated['rougeL'].fmeasure:.4f}"
    )
    
    return evaluation_results

